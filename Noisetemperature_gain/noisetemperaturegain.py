#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
from scipy.constants import *


# In[2]:


def noisetemp_gain(input_signal, output_signals, frequency, bandwidth, impedance):  #Shape of the inputs: input_signal = [], output_signals = [[Output from amp0], [[Output from amp1], [Output from amp2],....,[Output from amp'n'], frequency = (), bandwidth = (), Impedance = ()]
    fourier = []
    fourier_magnitude = []
    clean_signal_fourier_magnitude = []
    clean_signal = []
    noisy_fourier_magnitude = []
    noise = []
    gain_amplifiers = []
    total_signals = [input_signal]

   
    for i in range(len(output_signals)):

        a = np.fft.fft(output_signals[i])
        fourier.append(a)
        b = abs(fourier[i])
        fourier_magnitude.append(b)
        
        

        
        max_index = np.argmax(fourier_magnitude[i])
        #obtaing the signals from fft, separating the signals from the output signals
        index_signal = np.zeros_like(fourier_magnitude[i]) 
        index_signal[max_index] = 1
        index_signal[len(fourier[i]) - max_index] = 1
        retrieved_signal_fourier = fourier[i]*index_signal
        retrieved_signal_fourier_magnitude = fourier_magnitude[i]*index_signal
        retrieved_signal = np.fft.ifft(retrieved_signal_fourier)
        clean_signal.append(retrieved_signal)
        clean_signal_fourier_magnitude.append(retrieved_signal_fourier_magnitude)
        
        
        
        #obtaing the noise from fft, separating the noise from the output signals
        index_noise = np.ones_like(fourier_magnitude[i])
        index_noise[max_index] = 0
        index_noise[len(fourier[i]) - max_index] = 0
        retrieved_noise_fourier = fourier[i]*index_noise
        retrieved_noise_fourier_magnitude = fourier_magnitude[i]*index_noise
        retrieved_noise = np.fft.ifft(retrieved_noise_fourier)
        noise.append(retrieved_noise)
        noisy_fourier_magnitude.append(retrieved_noise_fourier_magnitude)
        
        
    #obtaining gains
    total_signals = total_signals + clean_signal
    for i in range(1,len(total_signals)):
        gain = np.mean(abs(total_signals[i]))/np.mean(abs(total_signals[i-1]))
        gain_amplifiers.append(gain)
    
    
    #obtaining the noise generated by each amplifier
    c = np.zeros((len(output_signals), len(output_signals)))
    for i in range(len(c)):
        for j in range(len(c)):
            if i == j:
                c[i,j] = 1
            if i > j:
                c[i,j] = gain_amplifiers[i]
    matrix_for_solving_linear_eq = c
    
    for i in range(len(c)):
        g_count = 1
        for j in range(len(c)):
            if c[j,i] != 0:
                g_count = c[j,i]*g_count
                matrix_for_solving_linear_eq[j,i] = g_count
    
    retrieved_noise_amplifiers = np.linalg.solve(matrix_for_solving_linear_eq, noise)
    
    #correction_term
    corrected_noise_0 = output_signals[0] - input_signal*(round(gain_amplifiers[0]))
    retrieved_noise_amplifiers[0] = corrected_noise_0
    
    
    #calculating noise temperature and noise power for each amplifier

    noisepower_amplifiers = []
    noisetemperature_amplifiers = []

    for i in range(len(retrieved_noise_amplifiers)):
        vrms_amplifier = np.std(retrieved_noise_amplifiers[i])
        np_Amplifier = (vrms_amplifier*vrms_amplifier)/(4*impedance)
        noisepower_amplifiers.append(np_Amplifier)
        nt_amplifier = (h*frequency)/(k*np.log(((h*frequency*bandwidth)/np_Amplifier)+1))
        noisetemperature_amplifiers.append(nt_amplifier)
     
  
    return(gain_amplifiers, clean_signal, noise, retrieved_noise_amplifiers, noisetemperature_amplifiers, noisepower_amplifiers)

