#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import pandas as pd
import os, sys
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import normalize
from scipy.stats import norm
from scipy.constants import *
from itertools import repeat


# In[ ]:


def using_fourier(input_signal, output_signals, frequency, bandwidth, resistance):
    fourier = []
    fourier_magnitude = []
    clean_signal_fourier_magnitude = []
    clean_signal = []
    noisy_fourier_magnitude = []
    noise = []
    gain_amplifiers = []
    noisetemperature_amplifiers = []
    noisepower_amplifiers = []
    retrived_noise_amplifiers = []
    
    #variables for calculating
    variable_1 = [input_signal]
    gain = 1
   
    for i in range(len(output_signals)):
        a, b = [], []                          #variables used for calculation and in loop
        max_index = 0                          #variables used for calculation and in loop
        a = np.fft.fft(output_signals[i])
        fourier.append(a)
        b = abs(fourier[i])
        fourier_magnitude.append(b)
        
        
        index_signal, index_noise, retrived_signal_fourier, retrived_noise_fourier = [],[],[],[]
        retrived_noise_fourier_magnitude, retrived_signal_fourier_magnitude = [],[]
        
        
        max_index = np.argmax(fourier_magnitude[i])
        #obtaing the signals from fft, separating the signals from the output signals
        index_signal = np.zeros_like(fourier_magnitude[i]) 
        index_signal[max_index] = 1
        index_signal[len(fourier[i]) - max_index] = 1
        retrived_signal_fourier = fourier[i]*index_signal
        retrived_signal_fourier_magnitude = fourier_magnitude[i]*index_signal
        retrived_signal = np.fft.ifft(retrived_signal_fourier)
        clean_signal.append(retrived_signal)
        clean_signal_fourier_magnitude.append(retrived_signal_fourier_magnitude)
        
        
        
        #obtaing the noise from fft, separating the noise from the output signals
        index_noise = np.ones_like(fourier_magnitude[i])
        index_noise[max_index] = 0
        index_noise[len(fourier[i]) - max_index] = 0
        retrived_noise_fourier = fourier[i]*index_noise
        retrived_noise_fourier_magnitude = fourier_magnitude[i]*index_noise
        retrived_noise = np.fft.ifft(retrived_noise_fourier)
        noise.append(retrived_noise)
        noisy_fourier_magnitude.append(retrived_noise_fourier_magnitude)
        
        
    #obtaining gains
    variable_1 = variable_1 + clean_signal
    for i in range(1,len(variable_1)):
        gain = np.mean(abs(variable_1[i]))/np.mean(abs(variable_1[i-1]))
        gain_amplifiers.append(gain)
    
    
    #obtaining the noise generated by each amplifier
    variable_2 = np.zeros((len(output_signals), len(output_signals)))
    for i in range(len(variable_2)):
        for j in range(len(variable_2)):
            if i == j:
                variable_2[i,j] = 1
            if i > j:
                variable_2[i,j] = gain_amplifiers[i]
    matrix_for_solving_linear_eq = variable_2
    
    for i in range(len(variable_2)):
        g_count = 1
        for j in range(len(variable_2)):
            if variable_2[j,i] != 0:
                g_count = variable_2[j,i]*g_count
                matrix_for_solving_linear_eq[j,i] = g_count
    
    retrived_noise_amplifiers = np.linalg.solve(matrix_for_solving_linear_eq, noise)
    
    
    #calculating noise temperature and noise power for each amplifier
    vrms_amplifier = 1
    noisepower_amplifiers = []
    noisetemperature_amplifiers = []

    for i in range(len(retrived_noise_amplifiers)):
        vrms_amplifier = np.std(retrived_noise_amplifiers[i])
        np_Amplifier = (vrms_amplifier*vrms_amplifier)/(4*resistance)
        noisepower_amplifiers.append(np_Amplifier)
        nt_amplifier = (h*frequency)/(k*np.log(((h*frequency*bandwidth)/np_Amplifier)+1))
        noisetemperature_amplifiers.append(nt_amplifier)
     
    #results
    for i in range(len(noisetemperature_amplifiers)):
        print('The noise temperature of amplifier', i ,'is', noisetemperature_amplifiers[i])
        print('------------------------------------------------------')
        print('Gain from amplifier', i, 'is', gain_amplifiers[i])
        print('------------------------------------------------------')
  
    return(gain_amplifiers, clean_signal, noise, retrived_noise_amplifiers, noisetemperature_amplifiers, noisepower_amplifiers)
     

